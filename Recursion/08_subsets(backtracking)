
Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]




code---->

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> subs;
        vector<int> sub;
        generateSubsets(nums, 0, sub, subs);
        return subs;
    }

private:
    void generateSubsets(vector<int>& nums, int index, vector<int>& sub, vector<vector<int>>& subs) {
        subs.push_back(sub);  // Add the current subset to the result
        for (int i = index; i < nums.size(); i++) {
            sub.push_back(nums[i]);                  // Choose
            generateSubsets(nums, i + 1, sub, subs);  // Explore
            sub.pop_back();                           // Un-choose (backtrack)
        }
    }
};
