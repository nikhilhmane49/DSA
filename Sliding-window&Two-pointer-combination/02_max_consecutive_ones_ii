Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

 

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
 

code--->




class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
       int rigth=0;
       int left=0;
       int len=0;
       int n=nums.size();
       int countzero=0;

       while(rigth<n){

        if(nums[rigth]==0){
            countzero++;
        }

        if(countzero>k){
            if(nums[left]==0){
                countzero--;
            }
            left++;
        }

        len=max(len,rigth-left+1);

        rigth++;
       }
         return len; 
    }
  
};
