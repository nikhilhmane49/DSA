 //**************(Q17 majority element)**************
  

description--->>Given an array nums of size n, return the majority element.
             The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.




code---->>

#include<iostream>
#include<vector>
#include<map>

int main(){



//******(1st mehod using brute force method)*********
  
vector<int>nums{1,2,1,2,2};

  int size=nums.size();

  for(int i=0; i<size;i++){
    int count=0;
    for(int j=0;j<size;j++){
      if(nums[i]==nums[j]){
        count++;
      }
    }

    if(count>size/2){
      cout<<nums[i];
      break;
    }
  }


  //time complixcity is O(n^2)
  //space complixcity is O(1)




  //**************(2nd method using map)**************

  vector<int>nums{1,2,1,2,2};
  int size=nums.size();
map<int,int>freq;

  for(int i=0;i<size;i++){
    freq[nums[i]]++;
  }

  for(auto it:freq){
    if(it.second>size/2){
    cout<<it.first;
    }
  }
  


  //Space Complexity: O(N) as we are using a map data structure.
  //Time complixty is o(nlogn)+o(n)--->>o(nlogn)



  return 0;

  }
