
  //***********************(19Q maximum sum of  subarray)*****************)

description---->>Given an integer array nums, find the subarray with the largest sum, and return its sum.


code--->>

#include<iostream>
#include<vector>


int main(){


//*************(using for loop*****)

  
   vector<int>nums{-2,1,-3,4,-1,2,1,-5,4};

   int size=nums.size();

 int maxi=INT_MIN;

   for(int i=0;i<size;i++){
     int sum=0;

     for(int j=i;j<size;j++){
       sum+=nums[j];

      maxi=max(sum,maxi);
     }
   }

   cout<<maxi;

//#####the time complixty is o(n^2)
//##### the space complixty o(1)


//*********(Kadane's algorithm)*********)

  vector<int>nums{-2,1,-3,4,-1,2,1,-5,4};
int size=nums.size();
  int maxi=INT_MIN;
  int sum=0;

  for(int i=0;i<size;i++){


    sum+=nums[i];

    if(sum>maxi){
      maxi=sum;
    }

    if(sum<0){
      sum=0;
    }
  }


  cout<<maxi;
  

//#####the time complixty is o(n)
//##### the space complixty o(1)





  
   return 0;
 }
