//######***3-sum-problem****##########

description---->>>Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

                  Notice that the solution set must not contain duplicate triplets.


//#########Q) 3-sum


    code---->>>

#include<iostram>
using namespace std;
int main(){

vector<int>arr={-1,0,1,2,-1,-4};

 vector<vector<int>> answer;
        int n = arr.size();
        sort(arr.begin(), arr.end());

        for (int i = 0; i < n; i++) {
            if (i > 0 && arr[i] == arr[i - 1])
                continue;

            int j = i + 1;
            int k = n - 1;

            while (j < k) {
                int sum = arr[i] + arr[j] + arr[k];
                if (sum == 0) {
                    vector<int> temp = {arr[i], arr[j], arr[k]};
                    answer.push_back(temp);
                    j++;
                    k--;

                    while (j < k && arr[j] == arr[j - 1])
                        j++;
                    while (j < k && arr[k] == arr[k + 1])
                        k--;
                } else if (sum < 0) {
                    j++;
                } else {
                    k--;
                }
            }
        }

        return answer;
    }





    time complixty ---->o(n^2)
space complixty ---->o(n+k)
