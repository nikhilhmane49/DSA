
//************6Q find the duplicate number in the vector************

description---->>we have the vector and we have to find the duplicate number in the vector but the duplicate number may be more then one 
                and this vector or array is of n+1 size,and elements in this vector is in the range of 1 to n only.






  
code---->>

  

#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>
using namespace std;

int main(){
    
    //******bruteforce
    vector<int>num={2, 4, 3, 2, 1, 4};
    int n=num.size();
    bool found=false;
    
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            if(num[i]==num[j]){
              cout<<num[i]<<endl;
              found=false;
            }
        }
        
    }
    if(found){
        cout<<"their is no duplicate";
    }
    
    Time Complexity: O(n^2)
    
    //**********Hashing
    vector<int>num={9, 4, 3, 1, 1, 4};
    unordered_map<int,int>hash;
    int n=num.size();
    
    for(int i=0;i<n;i++){
        hash[num[i]]++;
        
    }
    
    for(auto pair:hash){
        if(pair.second>1){
        cout<<pair.first<<endl;
        }
    }
    
     Time Complexity: O(n)
    
   //************sorting function
   
  vector<int>num={9, 4, 3, 1, 1, 4};
  int n=num.size();
   
  sort(num.begin(),num.end());
   
  for(int i=0;i<n;i++){
      if(num[i]==num[i+1]){
          cout<<num[i]<<endl;
      }
  }
    
    Time Complexity: O(n log n)
    
    //***********visited method
    
     vector<int>num={9, 5, 3, 1, 1, 4};
     int n=num.size();
   
   
   for(int i=0;i<n;i++){
      int ind=abs(num[i]);
       if(num[ind]<0){
           cout<<ind<<endl;
       }
       num[ind]=num[ind]*(-1);
   }
    Time Complexity: O(n)
   
    
    return 0;
}




  //*************(3rd method postion method)********

  
  
    
    vector<int>v={1,3,2,4,2};                             //####initiallisation of the vector and the value in the vector

    while((v[0] != v[v[0]])){
    
    swap(v[0],v[v[0]]);
  }

  cout<<"the duplicate number is"<<" "<<v[0];

  //### time complixity:  the time complixity of this code is O(n)
  //############### the space complixty is o(1)

  //##### this is also the best and shorter method to find the duplicate number in the vector.



  return 0;

}

  
