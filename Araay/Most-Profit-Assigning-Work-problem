######################Most-Profit-Assigning-Work-problem#####

description ----->>

You have n jobs and m workers. You are given three arrays: difficulty, profit, and worker where:

difficulty[i] and profit[i] are the difficulty and the profit of the ith job, and
worker[j] is the ability of jth worker (i.e., the jth worker can only complete a job with difficulty at most worker[j]).
Every worker can be assigned at most one job, but one job can be completed multiple times.

For example, if three workers attempt the same job that pays $1, then the total profit will be $3. If a worker cannot complete any job, their profit is $0.
Return the maximum profit we can achieve after assigning the workers to the jobs.




code--->>


Q  difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]


#include<iostram>
using namespace std;
int main(){

vector<int>difficulty={2,4,6,8,10}
vector<int>profit={10,20,30,40,50}
vector<int> worker ={4,5,6,7}

 int n = difficulty.size();
        int m = worker.size();

        vector<pair<int,int>> pairs;
        for (int i = 0; i < n; i++) {
            pairs.push_back(make_pair(difficulty[i], profit[i]));
        }

        sort(pairs.begin(), pairs.end());

     
        sort(worker.begin(), worker.end());

        int totalmax = 0;
        int maxprofit = 0;
        int j = 0;

        for (int i = 0; i < m; i++) {          
            while (j < n && pairs[j].first <= worker[i]) {
                maxprofit = max(maxprofit, pairs[j].second);
                j++;
            }

            totalmax += maxprofit;
        }

        return totalmax;

}


time complixty ---->o(nlogn)
space complixty ---->o(n)

