//####################Merge-Intervals-problem###########

description---->>Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, 
                 and return an array of the non-overlapping intervals that cover all the intervals in the input.


Q)Merge-Intervals-problem


code---->>

#include<iostram>
using namespace std;
int main(){

vector<int>arr={[1,3],[2,6],[8,10],[15,18]};

         int size = arr.size();
        vector<vector<int>> ans;
        sort(arr.begin(), arr.end());
        for (int i = 0; i < size; i++) {
            int start = arr[i][0];
            int end = arr[i][1];

            // skip the intervel that is allready their

            if (!ans.empty() && end <= ans.back()[1]) {
                continue;
            }

            for (int j = i + 1; j < size; j++) {
                if (arr[j][0] <= end) {
                    end = max(end, arr[j][1]);
                } else {
                    break;
                }
            }
            ans.push_back({start, end});
        }

        return ans;
    }
time complixty ---->o(n^2)
    space complixty ---->o(n)


link--letcode----https://leetcode.com/problems/merge-intervals/description/
 
