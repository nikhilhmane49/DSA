
//********************11 Q megre sorted array************

description ----->>> 1)You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, 
                       representing the number of elements in nums1 and nums2 respectively.

                     2) Merge nums1 and nums2 into a single array sorted in non-decreasing order.

                     3) The final sorted array should not be returned by the function, but instead be stored inside the array nums1. 
                        To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, 
                        and the last n elements are set to 0 and should be ignored. nums2 has a length of n



code----->>>


#include <iostream>
#include <vector>
#include <algorithm>


using namespace std;

int main()
{


//***********(1st method using sort function)*********


vector<int> v1{1, 2, 3, 0, 0, 0};
  vector<int> v2{2, 5, 6};

  int idx_v1 = 0; 

  for (int i = 0; i < v2.size(); i++) {
    
      while (idx_v1 < v1.size() && v1[idx_v1] != 0) {
          idx_v1++;        //######## Find the next zero element in v1
      }

      if (idx_v1 < v1.size()) {
          v1[idx_v1] = v2[i]; //########### Assign the corresponding value from v2 to the zero element in v1
      } else {
          break;           //######## If there are no more zeros in v1, exit the loop
      }
  }

#########sort the vector

  sort(v1.begin(), v1.end()); //######## Sort the merged vector(v1) in ascending order
                              //######### used #include <algorithm> for sort funcation 
                              //########the time complixity of the sorting function  is O(nlogn)
                                         

  //##### Print the merged vector(v1) stored in v1
  
  for (int num : v1) {
      cout << num << " ";
  }


  //###### the time complixity of the code is O(nlogn)+O(n+m)=O(nlogn)----->(how)the time complixity of
            sort function is O(nlogn) and the time complixity of the  loops  is O(n+m)
  

  //############### the space complixty is o(n+m)--->The space required to store these vectors is directly proportional to the sizes of the vectors.





 //*****************************************2method 


#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> num1 = {4, 7, 9, 0, 0};
    vector<int> num2 = {1, 6};
    int j = 0;

    for (int i = 0; i < num1.size(); i++) {
        if (num1[i] == 0 && j < num2.size()) {
            num1[i] = num2[j++];
        }
    }

    // Bubble sort
    for (int i = 0; i < num1.size() - 1; i++) {
        for (int j = 0; j < num1.size() - 1 - i; j++) {
            if (num1[j] > num1[j + 1]) {
                swap(num1[j], num1[j + 1]);
            }
        }
    }

    for (int i = 0; i < num1.size(); i++) {
        cout << num1[i] << " ";
    }

    return 0;
}
