//*****search-a-2d-matrix-problem


You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.


#include<iostram>
using namespace std;
int main(){

vector<vector<int>>matrix = {[1,3,5,7],[10,11,16,20],[23,30,34,60]};
int target = 3;


 int row=matrix.size();
    int col=matrix[0].size();
    int size=row*col;
    int s=0;
    int e=size-1;
    int mid=s+(e-s)/2;

    while(s<=e){
        int rowindx=mid/col;
        int colindx=mid%col;
        int currentindx=matrix[rowindx][colindx];

        if(target==currentindx){
            return true;
        }

        else if(target>currentindx){
            //move to rigth;

            s=mid+1;
        }
        else {
            //move to left
            e=mid-1;
        }
        mid=s+(e-s)/2;
    }

    return false;
        
    }



         time complixty ---->o(log n )
    space complixty ---->o(1)


link-----leetcode----->https://leetcode.com/problems/search-a-2d-matrix/description/
