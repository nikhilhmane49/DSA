//*************************find-first-and-last-position-of-element-in-sorted-array-problem


Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.





#include<iostram>
using namespace std;
int main(){

vector<int>arr={5,7,7,8,8,10};
int target=8


int size=arr.size();
vector<int>result;
int start = 0;
    int end = size - 1;
    int mid;
    int first = -1;
    int last = -1;

    // Finding the first occurrence
    while (start <= end) {
        mid = start + (end - start) / 2;
        if (arr[mid] == target) {
            first = mid;
            end = mid - 1;  // Continue to search on the left side
        } else if (arr[mid] < target) {
            start = mid + 1;
        } else {
            end = mid - 1;
        }
        

    }
     result.push_back(first);

    // Reset the variables for finding the last occurrence
    start = 0;
    end = size - 1;

    // Finding the last occurrence
    while (start <= end) {
        mid = start + (end - start) / 2;
        if (arr[mid] == target) {
            last = mid;
            start = mid + 1;  // Continue to search on the right side
        } else if (arr[mid] < target) {
            start = mid + 1;
        } else {
            end = mid - 1;
        }
       
    }
 result.push_back(last);



    return result;   
        

}
    time complixty ---->o(log n )
    space complixty ---->o(1)


link-leet-code------->>>>https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/

 
