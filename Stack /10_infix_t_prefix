
convert infix to prefix



infix=(A + B) * (C - D)

prefix=* + A B - C D






#include <iostream>
#include <string>
#include <algorithm>
#include <stack>

using namespace std;

int pec(char c) {
    if (c == '^') {
        return 3;
    }
    else if (c == '*' || c == '/') {
        return 2;
    }
    else if (c == '+' || c == '-') {
        return 1;
    }
    else {
        return -1;
    }
}

bool isOperand(char c) {
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9');
}

int main() {
    stack<char> st;
    string ans = "";
    string input = "(A+B)*(C-D)";

    reverse(input.begin(), input.end());

    // Swap '(' and ')'
    for (int i = 0; i < input.length(); i++) {
        if (input[i] == '(') {
            input[i] = ')';
        }
        else if (input[i] == ')') {
            input[i] = '(';
        }
    }

    for (int i = 0; i < input.length(); i++) {
        char c = input[i];

        if (isOperand(c)) {
            ans += c;
        }
        else if (c == '(') {
            st.push(c);
        }
        else if (c == ')') {
            while (!st.empty() && st.top() != '(') {
                ans += st.top();
                st.pop();
            }
            if (!st.empty()) st.pop(); // Pop the '('
        }
        else { // operator
            while (!st.empty() && 
                   ((pec(c) < pec(st.top())) || 
                    (pec(c) == pec(st.top()) && c != '^')) && 
                   st.top() != '(') {
                ans += st.top();
                st.pop();
            }
            st.push(c);
        }
    }

    while (!st.empty()) {
        ans += st.top();
        st.pop();
    }

    reverse(ans.begin(), ans.end());

    cout << ans;

    return 0;
}
