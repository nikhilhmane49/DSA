Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

 

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
 



code---->




class Solution {
public:
    string removeKdigits(string num, int k) {
        stack<char>st;

        for(char digit:num){
            while(!st.empty()&& k>0&& st.top()>digit){
                st.pop();
                k--;
            }
                st.push(digit);
        }

        //remove
        while(k>0 && !st.empty()){
            st.pop();
            k--;
        }
       
       string result;

        while(!st.empty()){
            result+=st.top();
            st.pop();
        }

        reverse(result.begin(),result.end());

        int pos=0;

        while(pos<result.size()&& result[pos]=='0'){
            pos++;
        }


        // If all digits were zero
        if (pos == result.size()) {
           result = "0";
        } else {
          result = result.substr(pos);
        }

        return result;
    }
};

