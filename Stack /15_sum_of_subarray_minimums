
Q)sum-of-subarray-minimums

Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.
Example 2:

Input: arr = [11,81,94,43,3]
Output: 444


Instead of looking at each subarray and finding its minimum...

👉 We flip the thinking:
For each element arr[i], calculate how many subarrays exist where arr[i] is the minimum.

If we know that, then:

cpp
Copy
Edit
contribution of arr[i] = arr[i] × count of subarrays where it is minimum
How do we find this count?
We compute:

How many elements to the left can we include before we hit something less than arr[i]?

How many elements to the right can we include before we hit something less than or equal to arr[i]?

This gives us:

cpp
Copy
Edit
left = i - ple[i]         // number of elements to the left (inclusive)
right = nle[i] - i        // number of elements to the right (inclusive)
count = left * right
Then:

cpp
Copy
Edit
arr[i] contributes arr[i] * left * right
🔧 Definitions
PLE (Previous Less Element): The closest index on the left of i where the value is less than arr[i]

NLE (Next Less Element): The closest index on the right of i where the value is less than or equal to arr[i]

We use monotonic stacks to compute both efficiently.

🧱 Step-by-Step
Step 1: Compute PLE for each index
Use a monotonic increasing stack.

For every element arr[i]:

Pop from the stack until top of stack is less than arr[i]

PLE is the top of the stack (or -1 if stack is empty)

Step 2: Compute NLE for each index
Again, use a monotonic increasing stack

Traverse right to left:

Pop while top of stack is greater than or equal to arr[i]

NLE is the top of the stack (or n if stack is empty)

Step 3: Compute Contributions
For every index i:

cpp
Copy
Edit
left = i - ple[i]
right = nle[i] - i
result += arr[i] * left * right
Take modulo 
10
9
+
7
10 
9
 +7 to prevent overflow.

🧮 Example: arr = [3, 1, 2, 4]
Let’s compute manually:

i	arr[i]	PLE[i]	NLE[i]	left	right	Count	Contribution
0	3	-1	1	1	1	1	3
1	1	-1	4	2	3	6	6 × 1 = 6
2	2	1	3	1	1	1	2
3	4	2	4	1	1	1	4

Total sum = 3 + 6 + 2 + 4 = 15 → wait! It's supposed to be 17.

Ah — looks like our count is off for arr[1] = 1. It actually appears in:

[1]

[1,2]

[1,2,4]

[3,1]

[3,1,2]

[3,1,2,4]

That's 6 subarrays — our formula works ✅

⏱️ Time and Space Complexity
Time: O(n) — each element is pushed and popped at most once in the stack

Space: O(n) — for PLE, NLE, and the stack









code---------->





class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size();
        const int MOD = 1e9 + 7;

        vector<int> ple(n), nle(n);
        stack<int> st;

        // Compute PLE
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && arr[st.top()] > arr[i]) {
                st.pop();
            }
            ple[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }

        // Clear stack before computing NLE
        while (!st.empty()) st.pop();

        // Compute NLE
        for (int i = n - 1; i >= 0; --i) {
            while (!st.empty() && arr[st.top()] >= arr[i]) {
                st.pop();
            }
            nle[i] = st.empty() ? n : st.top();
            st.push(i);
        }

        // Calculate the result
        long long result = 0;
        for (int i = 0; i < n; ++i) {
            long long left = i - ple[i];
            long long right = nle[i] - i;
            result = (result + arr[i] * left * right) % MOD;
        }

        return (int)result;
    }
};
