
Explaination-------->>


Explanation of stringstream and >> Operator in C++
üîπ What is stringstream?
stringstream is a part of the <sstream> library in C++ and is used for manipulating strings as streams (just like cin and cout). It helps in:

Breaking a string into words (like splitting a sentence into individual words).
Converting strings to numbers (string to int, float, etc.).
Formatting and processing text efficiently.
üîπ Why Use stringstream?
It allows us to extract words or numbers from a string just like we extract input from cin.
It provides a way to parse text data without using complex loops and conditions.
üìå How stringstream Works
1Ô∏è‚É£ Creating a stringstream Object
We create a stringstream object and initialize it with a string.

cpp
Copy
Edit
#include <iostream>
#include <sstream>  // Required for stringstream
using namespace std;

int main() {
    string sentence = "Hello world! This is C++.";
    stringstream ss(sentence);  // Convert the string into a stream

    return 0;
}
üîπ Now, ss acts as a stream containing "Hello world! This is C++."

üìå What is the >> Operator?
2Ô∏è‚É£ Using >> to Extract Words
The extraction operator (>>) is used to read words one by one from the stringstream.

cpp
Copy
Edit
string word;
while (ss >> word) {
    cout << word << endl;
}
üîπ How does >> work?

It extracts one word at a time (separated by spaces).
It automatically stops at spaces and moves to the next word.









Q_number_of_valid_words_in_a_sentence
A sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. Each sentence can be broken down into one or more tokens separated by one or more spaces ' '.

A token is a valid word if all three of the following are true:

It only contains lowercase letters, hyphens, and/or punctuation (no digits).
There is at most one hyphen '-'. If present, it must be surrounded by lowercase characters ("a-b" is valid, but "-ab" and "ab-" are not valid).
There is at most one punctuation mark. If present, it must be at the end of the token ("ab,", "cd!", and "." are valid, but "a!b" and "c.," are not valid).
Examples of valid words include "a-b.", "afad", "ba-c", "a!", and "!".

Given a string sentence, return the number of valid words in sentence.

 

Example 1:

Input: sentence = "cat and  dog"
Output: 3
Explanation: The valid words in the sentence are "cat", "and", and "dog".
Example 2:

Input: sentence = "!this  1-s b8d!"
Output: 0
Explanation: There are no valid words in the sentence.
"!this" is invalid because it starts with a punctuation mark.
"1-s" and "b8d" are invalid because they contain digits.
Example 3:

Input: sentence = "alice and  bob are playing stone-game10"
Output: 5
Explanation: The valid words in the sentence are "alice", "and", "bob", "are", and "playing".
"stone-game10" is invalid because it contains digits.











class Solution {
public:

    bool isValidWord(const string& word) { // Correct function name
        int n = word.size();
        bool hasHyphen = false;
        bool hasPunctuation = false;

        for(int i = 0; i < n; i++) {
            // Check if character is a digit
            if(isdigit(word[i])) {
                return false;
            }

            // Check hyphen rules
            if(word[i] == '-') {
                if(hasHyphen || i == 0 || i == n-1 || i+1 >= n || !islower(word[i-1]) || !islower(word[i+1])) {
                    return false;
                }
                hasHyphen = true;
            }

            // Check punctuation rules
            if(word[i] == '!' || word[i] == '.' || word[i] == ',') {
                if(hasPunctuation || i != n-1) {
                    return false;
                }
                hasPunctuation = true;
            }
        }
        return true;
    }

    int countValidWords(string sentence) {
        stringstream ss(sentence);
        string token;
        int validWordCount = 0; // Corrected variable name

        while(ss >> token) {
            if(isValidWord(token)) { // Corrected function name
                validWordCount++;
            }
        }

        return validWordCount;
    }
};
