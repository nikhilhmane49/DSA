Given a valid parentheses string s, return the nesting depth of s. The nesting depth is the maximum number of nested parentheses.

 

Example 1:

Input: s = "(1+(2*3)+((8)/4))+1"

Output: 3

Explanation:

Digit 8 is inside of 3 nested parentheses in the string.

Example 2:

Input: s = "(1)+((2))+(((3)))"

Output: 3

Explanation:

Digit 3 is inside of 3 nested parentheses in the string.

Example 3:

Input: s = "()(())((()()))"

Output: 3










#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

int main() {
  string s="(1)+((2))+(((3)))";
  int n=s.length();
  
  int currentdepth=0;
  int maxdepth=0;
  
  
  for(char c:s){
      if(c=='('){
          currentdepth++;
          if (currentdepth > maxdepth) {
                maxdepth = currentdepth; 
            }
      }
      else if (c == ')'){
          currentdepth--;
      }
  }
  
  cout<<maxdepth;
    

    return 0;
}
