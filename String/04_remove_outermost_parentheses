remove-outermost-parentheses

A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.

For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.

Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.

Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.

 

Example 1:

Input: s = "(()())(())"
Output: "()()()"
Explanation: 
The input string is "(()())(())", with primitive decomposition "(()())" + "(())".
After removing outer parentheses of each part, this is "()()" + "()" = "()()()".
Example 2:

Input: s = "(()())(())(()(()))"
Output: "()()()()(())"
Explanation: 
The input string is "(()())(())(()(()))", with primitive decomposition "(()())" + "(())" + "(()(()))".
After removing outer parentheses of each part, this is "()()" + "()" + "()(())" = "()()()()(())".
Example 3:

Input: s = "()()"
Output: ""
Explanation: 
The input string is "()()", with primitive decomposition "()" + "()".
After removing outer parentheses of each part, this is "" + "" = "".
 








class Solution {
public:
    string removeOuterParentheses(string s) {

        string result="";
        int depth=0;

        for(char c:s){
        if(c=='('){
            if(depth>0){
                result+=c;
            }
            depth++;
        }
        else{
            depth--;
             if(depth>0){
                result+=c;
            }
        }

        }

        return result;
        
    }
};






result--->

i	char	depth Before	depth After	result
0	(	0	1	""
1	(	1	2	"("
2	)	2	1	"()"
3	(	1	2	"()("
4	)	2	1	"()()"
5	)	1	0	"()()"
6	(	0	1	"()()"
7	(	1	2	"()()("
8	)	2	1	"()()()"
9	)	1	0	"()()()"
